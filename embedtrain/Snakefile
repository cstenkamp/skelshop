import re
from shutil import unpack_archive

from embedtrain.datasets import DataSet
from embedtrain.embed_skels import BODY_EMBED_SKELS, EMBED_SKELS


def cnf(name, val=None):
    if val is None:
        return config[name]
    val = config.setdefault(name, val)
    globals()[name] = val
    return val


# Intermediate dirs
cnf("WORK", "work")
cnf("HAND_H5", WORK + "/hand.h5")
cnf("BODY_H5", WORK + "/body.h5")

SKEL_NAME_MAP = {}
for embed_skel in EMBED_SKELS.keys():
    embed_skel_lower = embed_skel.lower()
    man_tb_dir = cnf(embed_skel + "_MAN_TB", WORK + "/" + embed_skel_lower + "-man-tb")
    SKEL_NAME_MAP[man_tb_dir] = embed_skel


DataSet.config_datasets(cnf)


rule all:
    input:
        HAND_H5,
        BODY_H5,
        [globals()[skel_name + "_MAN_TB"] for skel_name in EMBED_SKELS.keys()]


rule ds_download:
    output:
        "{zip_dir}/{basename}"
    wildcard_constraints:
        zip_dir = "|".join((ds.zips for ds in DataSet.by_name.values()))
    params:
        url=lambda wc: DataSet.by_zip[wc.zip_dir].base_map[wc.basename]
    shell:
        "mkdir -p {wildcards.zip_dir} && " +
        "cd {wildcards.zip_dir} && " +
        "wget --retry-connrefused --waitretry=1 --read-timeout=20 " +
        "--timeout=15 -t 64 {params.url}"


def ds_extract_inp(wc):
    ds = DataSet.by_ex[wc.ex_dir]
    return ancient(ds.zips + "/" + ds.bare_map[wc.barename])


rule ds_extract:
    output:
        directory("{ex_dir}/{barename}")
    wildcard_constraints:
        ex_dir = "|".join((ds.ex_dir for ds in DataSet.by_name.values()))
    input:
        ds_extract_inp
    run:
        unpack_archive(input[0], output[0])


rule ds_extracted:
    input:
        lambda wc: [
            ancient(wc.ex_dir + "/" + ds)
            for ds in DataSet.by_ex[wc.ex_dir].bare_map.keys()
        ]
    output:
        touch("{ex_dir}.done")


def runscript(name):
    return f"python {workflow.basedir}/{name}.py"


rule openpose_hands:
    input:
        DataSet.by_name["hand"].ex_dir + ".done"
    output:
        HAND_H5
    shell:
        runscript("prep_images") + " hand" +
        " " + DataSet.by_name["hand"].ex_dir + " " + HAND_H5


rule openpose_body:
    input:
        DataSet.by_name["body"].ex_dir + ".done"
    output:
        BODY_H5
    shell:
        runscript("prep_images") + " body " +
        DataSet.by_name["body"].ex_dir + "/mpii_human_pose_v1/images/ " +
        BODY_H5


rule proj_hands_man:
    input:
        skels = HAND_H5,
        img_base = HAND_DS
    output:
        man_tb = directory(HAND_MAN_TB)
    shell:
        runscript("embed_vis") + " to-tensorboard " +
        "--image-base {input.img_base} {input.skels} {output.man_tb} HAND"

rule proj_body_man:
    input:
        skels = BODY_H5,
        img_base = BODY_DS
    output:
        man_tb = directory("{outdir}")
    wildcard_constraints:
        outdir = "|".join(("(^{}$)".format(re.escape(globals()[skel_name + "_MAN_TB"])) for skel_name in BODY_EMBED_SKELS.keys()))
    params:
        skel_name = lambda wildcards, output: SKEL_NAME_MAP[output.man_tb]
    shell:
        runscript("embed_vis") + " to-tensorboard " +
        "--image-base {input.img_base} " +
        "--body-labels {input.img_base}/mpii_human_pose_v1_u12_2/mpii_human_pose_v1_u12_2/mpii_human_pose_v1_u12_1.mat " +
        "{input.skels} {output.man_tb} {params.skel_name}"
